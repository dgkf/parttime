[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 parttime authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer. Bill Denney. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2022). parttime: package partial datetime format handling. https://dgkf.github.io/parttime/, https://github.com/dgkf/parttime.","code":"@Manual{,   title = {parttime: A package for partial datetime format handling},   author = {Doug Kelkhoff},   year = {2022},   note = {https://dgkf.github.io/parttime/, https://github.com/dgkf/parttime}, }"},{"path":"/index.html","id":"parttime","dir":"","previous_headings":"","what":"A package for partial datetime format handling","title":"A package for partial datetime format handling","text":"package partial datetime class generics","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package for partial datetime format handling","text":"","code":"devtools::install_github(\"dgkf/parttime\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"A package for partial datetime format handling","text":"parttime package aims make uncertainty datetimes central feature offering partial_time datetime class. includes: parsing wider range datetime string formats internal representations captures date component missingness overloading operators comparison mechanisms resolving datetime uncertainty imputation","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A package for partial datetime format handling","text":"partial_times can parsed strings. missing data immediately imputed known date. Instead, uncertainty preserved central part partial_time class. can access components datetime though partial_time matrix datetime fields, using lubridate-style accessors assignment functions. partial_time objects may uncertainty, comparison times conveys uncertainty. brief example, compare dates see unclear whether one greater-. \"2022\" date within calendar year (even outside calendar year timezone unknown!, see ). sense, two modes comparison - determine whether partial_time possibly definitely satisfies criteria. well, helper functions provided perform imputation. imputation functions wrappers around impute_time varying defaults default timestamp resolution imputation performed.","code":"pttms <- as.parttime(c(\"2022\", \"2022-02\")) pttms[, \"year\"] ##    2022 2022-02  ##    2022    2022  pttms[[1, \"year\"]] ## [1] 2022  year(pttms)  # the first row are names of elements in a named numeric vector ##    2022 2022-02  ##    2022    2022  year(pttms[1]) ## [1] 2022  month(pttms[2]) <- 3 pttms ## <partial_time<YMDhmsZ>[2]>  ## [1] \"2022\"    \"2022-03\"  month(pttms[1]) <- 3 pttms ## <partial_time<YMDhmsZ>[2]>  ## [1] \"2022-03\" \"2022-03\"  month(pttms) <- NA pttms ## <partial_time<YMDhmsZ>[2]>  ## [1] \"2022\" \"2022\" pttms <- as.parttime(c(\"2022\", \"2022-02\")) pttms[1] > pttms[2] ## [1] NA  pttms[2] > pttms[1] ## [1] NA definitely(pttms[1] > pttms[2]) ## [1] FALSE  possibly(pttms[2] > pttms[1]) ## [1] TRUE impute_date_max(pttms[2])  # resolve date fields with maximum value ## <partial_time<YMDhms+tz>[1]>  ## [1] \"2022-02-28\"  impute_time(pttms[1], \"1999-06-05T04:03:02\")  # arbitrary imputation ## <partial_time<YMDhmsZ>[1]>  ## [1] \"2022-06-05 04:03:02.000\""},{"path":"/index.html","id":"the-partial_time-class","dir":"","previous_headings":"","what":"The partial_time class","title":"A package for partial datetime format handling","text":"partial_times like time, may include NAs fields. example, \"1999\" tells us information year, month, day, hour, etc. still unknown. partial_times used situations specific point time intended, exactly occurred unknown.","code":""},{"path":"/index.html","id":"the-timespan-class","dir":"","previous_headings":"","what":"The timespan class","title":"A package for partial datetime format handling","text":"Similarly, timespan class offered, meant represent range times, denoted starting ending partial_time. Timespans might represent range start end day, like partial_time, can also represent ranges start end partial times different resolution.","code":""},{"path":[]},{"path":"/index.html","id":"parsing-incomplete-timestamps","dir":"","previous_headings":"","what":"Parsing Incomplete Timestamps","title":"A package for partial datetime format handling","text":"Parse ISO8601 timestampes using parsedate package’s parser, retains information missingness timestamp format.","code":"iso8601_dates <- c(   NA,   \"2001\",   \"2002-01-01\",   \"2004-245\", # yearday   \"2005-W13\",  # yearweek   \"2006-W02-5\",  # yearweek + weekday   \"2007-10-01T08\",   \"2008-09-20T08:35\",   \"2009-08-12T08:35.048\",  # fractional minute   \"2010-07-22T08:35:32\",   \"2011-06-13T08:35:32.123\",  # fractional second   \"2012-05-23T08:35:32.123Z\",  # Zulu time   \"2013-04-14T08:35:32.123+05\",  # time offset from GMT   \"2014-03-24T08:35:32.123+05:30\",  # time offset with min from GMT   \"20150101T08:35:32.123+05:30\"  # condensed form )  as.parttime(iso8601_dates) ## Warning in warn_repr_data_loss(x, includes = \"week\", excludes = \"weekday\"):   Date strings including week and excluding weekday can not be fully ## represented. To avoid loss of datetime resolution, such partial dates ## are best represented as timespans. See `?timespan`. ## <partial_time<YMDhms+tz>[15]>  ##  [1] NA                             \"2001\"                         ##  [3] \"2002-01-01\"                   \"2004-09-01\"                   ##  [5] \"2005\"                         \"2006-01-12\"                   ##  [7] \"2007-10-01 08\"                \"2008-09-20 08:35\"             ##  [9] \"2009-08-12 08:35:02.880\"      \"2010-07-22 08:35:32.000\"      ## [11] \"2011-06-13 08:35:32.123\"      \"2012-05-23 08:35:32.123\"      ## [13] \"2013-04-14 08:35:32.123+0500\" \"2014-03-24 08:35:32.123+0530\" ## [15] \"2015-01-01 08:35:32.123+0530\""},{"path":"/index.html","id":"imputing-timestamps","dir":"","previous_headings":"","what":"Imputing Timestamps","title":"A package for partial datetime format handling","text":"","code":"impute_time(\"2019\", \"2000-01-02T03:04:05.006+0730\") ## <partial_time<YMDhmsZ>[1]>  ## [1] \"2019-01-02 03:04:05.006\""},{"path":"/index.html","id":"partial-datetime-comparisons","dir":"","previous_headings":"","what":"Partial Datetime Comparisons","title":"A package for partial datetime format handling","text":"Partial timestamps include uncertainty, means often uncertainty comparing timestamps. help resolve uncertainty two helper functions, possibly definitely resolving uncertainty windows uncertainty overlap, equal (given resolution). Given uncertainty timestamps, can’t sure equal. situation, == return NA.","code":"options(parttime.assume_tz_offset = 0)  # assume GMT parttime(2019) < parttime(2020) ## [1] TRUE  options(parttime.assume_tz_offset = NA)  # don't assume a timezone parttime(2019) < parttime(2020) ## [1] NA  possibly(parttime(2019) < parttime(2020)) ## [1] TRUE  definitely(parttime(2019) < parttime(2020)) ## [1] FALSE parttime(2019) == parttime(2019) ## [1] NA  options(parttime.assume_tz_offset = 0) definitely(parttime(2019) == parttime(2019), by = \"year\") ## [1] TRUE  options(parttime.assume_tz_offset = NA) definitely(parttime(2019) == parttime(2019), by = \"year\") ## [1] FALSE"},{"path":"/index.html","id":"timespans","dir":"","previous_headings":"","what":"Timespans","title":"A package for partial datetime format handling","text":"Cast partial time’s missingness range possible values","code":"as.timespan(parttime(2019)) ## <timespan[1]> ## [1] [2019 — 2020)"},{"path":"/index.html","id":"tidyverse-compatible-vctrs","dir":"","previous_headings":"","what":"Tidyverse Compatible vctrs","title":"A package for partial datetime format handling","text":"tibble-style formatting makes easy see components partial_time missing.","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union  tibble(dates = iso8601_dates) %>%   mutate(     parttimes = as.parttime(dates),     imputed_times = impute_time_min(parttimes)   ) ## Warning in warn_repr_data_loss(x, includes = \"week\", excludes = \"weekday\"):   Date strings including week and excluding weekday can not be fully ## represented. To avoid loss of datetime resolution, such partial dates ## are best represented as timespans. See `?timespan`. ## # A tibble: 15 × 3 ##    dates               parttimes                    imputed_times                ##    <chr>               <pttm>                       <pttm>                       ##  1 <NA>                NA                           NA                           ##  2 2001                2001                         2001-01-01 00:00:00.000-1200 ##  3 2002-01-01          2002-01-01                   2002-01-01 00:00:00.000-1200 ##  4 2004-245            2004-09-01                   2004-09-01 00:00:00.000-1200 ##  5 2005-W13            2005                         2005-01-01 00:00:00.000-1200 ##  6 2006-W02-5          2006-01-12                   2006-01-12 00:00:00.000-1200 ##  7 2007-10-01T08       2007-10-01 08                2007-10-01 08:00:00.000-1200 ##  8 2008-09-20T08:35    2008-09-20 08:35             2008-09-20 08:35:00.000-1200 ##  9 2009-08-12T08:35.0… 2009-08-12 08:35:02.880      2009-08-12 08:35:02.880-1200 ## 10 2010-07-22T08:35:32 2010-07-22 08:35:32.000      2010-07-22 08:35:32.000-1200 ## 11 2011-06-13T08:35:3… 2011-06-13 08:35:32.123      2011-06-13 08:35:32.123-1200 ## 12 2012-05-23T08:35:3… 2012-05-23 08:35:32.123+0000 2012-05-23 08:35:32.123+0000 ## 13 2013-04-14T08:35:3… 2013-04-14 08:35:32.123+0500 2013-04-14 08:35:32.123+0500 ## 14 2014-03-24T08:35:3… 2014-03-24 08:35:32.123+0530 2014-03-24 08:35:32.123+0530 ## 15 20150101T08:35:32.… 2015-01-01 08:35:32.123+0530 2015-01-01 08:35:32.123+0530"},{"path":[]},{"path":"/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"A package for partial datetime format handling","text":"partial_time class pretty complete. timespan partial_difftime classes still construction!","code":""},{"path":[]},{"path":"/reference/Ops.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Handler for Ops generics for partial_time objects — Ops.partial_time","title":"Handler for Ops generics for partial_time objects — Ops.partial_time","text":"Handler Ops generics partial_time objects","code":""},{"path":"/reference/Ops.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handler for Ops generics for partial_time objects — Ops.partial_time","text":"","code":"# S3 method for partial_time Ops(e1, e2)"},{"path":"/reference/Ops.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handler for Ops generics for partial_time objects — Ops.partial_time","text":"e1 objects e2 objects","code":""},{"path":"/reference/Ops.partial_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handler for Ops generics for partial_time objects — Ops.partial_time","text":"","code":"# when assume_tz \"GMT\"         when assume_tz NA                                        # ---------------------------  ---------------------------                                        # raw    possibly  definitely   raw   possibly  definitely                                        # -----  --------- -----------  ----- --------- ----------- parttime(1998) < parttime(1999)        # TRUE   TRUE      TRUE         NA    TRUE      FALSE #> [1] TRUE parttime(1998) < parttime(1997)        # FALSE  FALSE     FALSE        NA    TRUE      FALSE #> [1] FALSE parttime(1999) < parttime(1999)        # NA     TRUE      FALSE        NA    TRUE      FALSE #> [1] NA parttime(1998) < parttime(1999, 1, 3)  # TRUE   TRUE      TRUE         TRUE  TRUE      TRUE #> [1] TRUE"},{"path":"/reference/Ops.timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Handler for Ops generics for timespan objects — Ops.timespan","title":"Handler for Ops generics for timespan objects — Ops.timespan","text":"Handler Ops generics timespan objects","code":""},{"path":"/reference/Ops.timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handler for Ops generics for timespan objects — Ops.timespan","text":"","code":"# S3 method for timespan Ops(e1, e2)"},{"path":"/reference/Ops.timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handler for Ops generics for timespan objects — Ops.timespan","text":"e1 objects e2 objects","code":""},{"path":"/reference/as.interval-partial_time-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for lubridate as.interval — as.interval,partial_time-method","title":"Wrapper for lubridate as.interval — as.interval,partial_time-method","text":"Wrapper lubridate .interval","code":""},{"path":"/reference/as.interval-partial_time-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for lubridate as.interval — as.interval,partial_time-method","text":"","code":"# S4 method for partial_time as.interval(x, start, ...)"},{"path":"/reference/as.interval-partial_time-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for lubridate as.interval — as.interval,partial_time-method","text":"x duration, difftime, period, numeric object describes length interval start POSIXt Date object describes interval begins ... additional arguments pass .interval","code":""},{"path":"/reference/as.interval-timespan-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for lubridate as.interval — as.interval,timespan-method","title":"Wrapper for lubridate as.interval — as.interval,timespan-method","text":"Wrapper lubridate .interval","code":""},{"path":"/reference/as.interval-timespan-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for lubridate as.interval — as.interval,timespan-method","text":"","code":"# S4 method for timespan as.interval(x, start, ...)"},{"path":"/reference/as.interval-timespan-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for lubridate as.interval — as.interval,timespan-method","text":"x duration, difftime, period, numeric object describes length interval start POSIXt Date object describes interval begins ... additional arguments pass .interval","code":""},{"path":"/reference/as.parttime.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to a parttime object — as.parttime","title":"Coerce an object to a parttime object — as.parttime","text":"Coerce object parttime object","code":""},{"path":"/reference/as.parttime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to a parttime object — as.parttime","text":"","code":"as.parttime(x, ..., format = parse_iso8601_datetime, on.na = \"warning\")"},{"path":"/reference/as.parttime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to a parttime object — as.parttime","text":"x object coersion ... Additional arguments passed format function provided. format function character value. function, accept character vector return matrix parttime components. character provide regular exprssion contains capture groups parttime components.  See parse_to_parttime_matrix's regex parameter details. .na function used signal condition new NA values introduced coercion, character value among \"error\", \"warning\" \"suppress\" (silencing messages) NULL equivalent \"suppress\".","code":""},{"path":"/reference/as.parttime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an object to a parttime object — as.parttime","text":"","code":"as.parttime(c(\"1985-10-18\", \"1991-08-23\", \"1996-09-26\")) #> <partial_time<YMDhmsZ>[3]>  #> [1] \"1985-10-18\" \"1991-08-23\" \"1996-09-26\"  # <partial_time<YMDhmsZ>[3]> # [1] \"1985-10-18\" \"1991-08-23\" \"1996-09-26\"  as.parttime(c(\"1234\", \"5678\"), format = \"(?<year>\\\\d{4})\") #> <partial_time<YMDhmsZ>[2]>  #> [1] \"1234\" \"5678\"  # <partial_time<YMDhmsZ>[2]> # [1] \"1234\" \"5678\"  # format function that returns a matrix of components utf8_str <- function(x) intToUtf8(utf8ToInt(x) - 16) as.parttime(c(\"B@@\", \"B@A@\"), format = function(x) cbind(year = sapply(x, utf8_str))) #> <partial_time<YMDhmsZ>[2]>  #> [1] \"0200\" \"2010\"  # <partial_time<YMDhmsZ>[2]> # [1] \"2000\" \"2010\"  # format function that returns a parttime object by first pre-processing input as.parttime(\"B@BB\", format = function(x) as.parttime(utf8_str(x))) #> <partial_time<YMDhmsZ>[1]>  #> [1] \"2022\"  # <partial_time<YMDhmsZ>[1]> # [1] \"2022\"  # format function that returns a parttime object by manual construction as.parttime(\"AIII\", format = function(x) parttime(year = as.numeric(utf8_str(x)))) #> <partial_time<YMDhmsZ>[1]>  #> [1] \"1999\"  # <partial_time<YMDhmsZ>[1]> # [1] \"1999\""},{"path":"/reference/as.timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast an object to a timespan — as.timespan","title":"Cast an object to a timespan — as.timespan","text":"Cast object timespan","code":""},{"path":"/reference/as.timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast an object to a timespan — as.timespan","text":"","code":"as.timespan(x, ..., format = parse_iso8601_as_timespan)"},{"path":"/reference/as.timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast an object to a timespan — as.timespan","text":"x object cast ... Additional arguments passed format function provided. format function character value. function, accept character vector return matrix parttime components. character provide regular exprssion contains capture groups parttime components.  See parse_to_parttime_matrix's regex parameter details.","code":""},{"path":"/reference/definitely.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"\"Definitely\" generic resolving uncertainty","code":""},{"path":"/reference/definitely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"definitely(x, ...)"},{"path":"/reference/definitely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"x uncertain object resolve ... additional paramters used class-specific functions","code":""},{"path":[]},{"path":"/reference/definitely.partial_time_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether a partial_time logical matrix is definitely TRUE — definitely.partial_time_logical","title":"Determine whether a partial_time logical matrix is definitely TRUE — definitely.partial_time_logical","text":"Determine whether partial_time logical matrix definitely TRUE","code":""},{"path":"/reference/definitely.partial_time_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether a partial_time logical matrix is definitely TRUE — definitely.partial_time_logical","text":"","code":"# S3 method for partial_time_logical definitely(x, by = ncol(attr(x, \"pttm_lgl\")), ...)"},{"path":"/reference/definitely.partial_time_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine whether a partial_time logical matrix is definitely TRUE — definitely.partial_time_logical","text":"x partial_time_logical matrix coersion resolution assessment, column index ... additional arguments unused","code":""},{"path":"/reference/definitely.partial_time_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine whether a partial_time logical matrix is definitely TRUE — definitely.partial_time_logical","text":"","code":"x <- as.parttime(c(\"\", \"2019\", \"2018-01-02\")) #> Warning: Values could not be parsed (1 of 3 (33.3%)). Examples of unique failing #> formats: #>  #>     ''   y <- as.parttime(c(\"2018\", \"2019-02\", \"2018-02\"))  definitely(x != y) #> [1] FALSE FALSE  TRUE definitely(x != y, by = \"year\") #> [1] FALSE FALSE FALSE"},{"path":"/reference/dot-i.html","id":null,"dir":"Reference","previous_headings":"","what":"shorthand for converting dimnames to indices, for easier column subtraction — .i","title":"shorthand for converting dimnames to indices, for easier column subtraction — .i","text":"shorthand converting dimnames indices, easier column subtraction","code":""},{"path":"/reference/dot-i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shorthand for converting dimnames to indices, for easier column subtraction — .i","text":"","code":".i(x, dim, ...)"},{"path":"/reference/dot-i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shorthand for converting dimnames to indices, for easier column subtraction — .i","text":"x object dimnames<- defined dim dimension index ... names selected ","code":""},{"path":"/reference/end.html","id":null,"dir":"Reference","previous_headings":"","what":"end S3 generic — end","title":"end S3 generic — end","text":"generic method retrieve end object","code":""},{"path":"/reference/end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"end S3 generic — end","text":"","code":"end(x, ...)"},{"path":"/reference/end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"end S3 generic — end","text":"x object retrieve end ... Additional arguments passed methods","code":""},{"path":"/reference/eq_parttimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal comparison handler for partial_time objects — eq_parttimes","title":"Equal comparison handler for partial_time objects — eq_parttimes","text":"Equal comparison handler partial_time objects","code":""},{"path":"/reference/eq_parttimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal comparison handler for partial_time objects — eq_parttimes","text":"","code":"eq_parttimes(generic, e1, e2)"},{"path":"/reference/eq_parttimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal comparison handler for partial_time objects — eq_parttimes","text":"generic generic operator selected e1 objects e2 objects","code":""},{"path":"/reference/eq_parttimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal comparison handler for partial_time objects — eq_parttimes","text":"","code":"x <- as.parttime(c(\"2019\", \"2018-01-04\", NA, \"2011\")) y <- as.parttime(c(\"2019\", \"2018-01-03\", NA, \"2010-01\"))  x == y #> [1]    NA FALSE    NA FALSE"},{"path":"/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Similar to matrix and array [ behavior, but allows for providing a numeric\nvector of dimensions to drop — extract","title":"Similar to matrix and array [ behavior, but allows for providing a numeric\nvector of dimensions to drop — extract","text":"Similar matrix array [ behavior, allows providing numeric vector dimensions drop","code":""},{"path":"/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similar to matrix and array [ behavior, but allows for providing a numeric\nvector of dimensions to drop — extract","text":"","code":"extract(x, ..., drop = TRUE, envir = parent.frame())"},{"path":"/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similar to matrix and array [ behavior, but allows for providing a numeric\nvector of dimensions to drop — extract","text":"x array matrix extract ... pased [ drop whether drop dimensions, logical numeric vector dimensions drop envir environment evaluate [ call","code":""},{"path":"/reference/format_field_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Format individual components of a parttime matrix — format_field_matrix","title":"Format individual components of a parttime matrix — format_field_matrix","text":"Format individual components parttime matrix","code":""},{"path":"/reference/format_field_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format individual components of a parttime matrix — format_field_matrix","text":"","code":"format_field_matrix(   x,   verbose = getOption(\"parttime.print_verbose\", FALSE),   tz )"},{"path":"/reference/format_field_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format individual components of a parttime matrix — format_field_matrix","text":"x parttime matrix format verbose logical value indicating whether include full timestamps, even partially missing. tz logical value indicating whether include timezone information.  default, display timezones missing equal assumed timezone option.","code":""},{"path":"/reference/has_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a partial_time object is incomplete — has_partial","title":"Test whether a partial_time object is incomplete — has_partial","text":"Test whether partial_time object incomplete","code":""},{"path":"/reference/has_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a partial_time object is incomplete — has_partial","text":"","code":"has_partial(   x,   ...,   components = c(\"year\", \"month\", \"day\", \"hour\", \"min\", \"sec\", \"secfrac\", \"tzhour\",     \"tzmin\") )"},{"path":"/reference/has_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a partial_time object is incomplete — has_partial","text":"x partial_time object test incompleteness ... additional arguments unused components components include testing","code":""},{"path":"/reference/has_partial_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a partial_time object's date components are incomplete — has_partial_date","title":"Test whether a partial_time object's date components are incomplete — has_partial_date","text":"Test whether partial_time object's date components incomplete","code":""},{"path":"/reference/has_partial_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a partial_time object's date components are incomplete — has_partial_date","text":"","code":"has_partial_date(x)"},{"path":"/reference/has_partial_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a partial_time object's date components are incomplete — has_partial_date","text":"x partial_time object test incompleteness","code":""},{"path":"/reference/has_partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a partial_time object's time components are incomplete — has_partial_time","title":"Test whether a partial_time object's time components are incomplete — has_partial_time","text":"Test whether partial_time object's time components incomplete","code":""},{"path":"/reference/has_partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a partial_time object's time components are incomplete — has_partial_time","text":"","code":"has_partial_time(x)"},{"path":"/reference/has_partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a partial_time object's time components are incomplete — has_partial_time","text":"x partial_time object test incompleteness","code":""},{"path":"/reference/impute_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a partial time object with a timestamp or specific fields — impute_time","title":"Impute a partial time object with a timestamp or specific fields — impute_time","text":"Impute partial time object timestamp specific fields","code":""},{"path":"/reference/impute_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a partial time object with a timestamp or specific fields — impute_time","text":"","code":"impute_time(x, time, tz, ...)  impute_date(x, time, ..., res = \"day\")  impute_time_min(x, tz = \"-1200\", ...)  impute_date_min(x, ..., res = \"day\")  impute_time_max(x, tz = \"+1400\", ...)  impute_date_max(x, ..., res = \"day\")  impute_time_mid(x, tz = \"GMT\", ...)  impute_date_mid(x, ..., res = \"day\")  # S3 method for default impute_time(x, time, tz = \"GMT\", ...)  # S3 method for POSIXt impute_time(x, time, tz = \"GMT\", ...)  # S3 method for partial_time impute_time(x, time, tz = \"GMT\", ..., res = NULL)"},{"path":"/reference/impute_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a partial time object with a timestamp or specific fields — impute_time","text":"x datetime-like object impute time datetime-like object use imputation tz character timezone name imputation, character value use timezone part datetime numeric minute offset. ... additional individual named fields impute. Can one \"year\", \"month\", \"day\", \"hour\", \"min\", \"sec\", \"secfrac\", \"tzhour\", \"tzmin\". res highest resolution datetime field used imputation. Either character value represented highest resolution field NULL impute fields. impute_date family functions, defaults \"day\", NULL otherwise.","code":""},{"path":"/reference/impute_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a partial time object with a timestamp or specific fields — impute_time","text":"new partial_time specified fields imputed","code":""},{"path":"/reference/includes.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether one object includes another — includes","title":"Determine whether one object includes another — includes","text":"Determine whether one object includes another","code":""},{"path":"/reference/includes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether one object includes another — includes","text":"","code":"includes(e1, e2)"},{"path":"/reference/includes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine whether one object includes another — includes","text":"e1 object test whether includes e2 e2 object test whether included e1","code":""},{"path":"/reference/includes.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether a partial time contains an object — includes.partial_time","title":"Determine whether a partial time contains an object — includes.partial_time","text":"Determine whether partial time contains object","code":""},{"path":"/reference/includes.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether a partial time contains an object — includes.partial_time","text":"","code":"# S3 method for partial_time includes(e1, e2)"},{"path":"/reference/includes.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine whether a partial time contains an object — includes.partial_time","text":"e1 object test whether includes e2 e2 object test whether included e1","code":""},{"path":"/reference/includes.partial_time.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for whether a timestamp could be included within parttime uncertainty — includes.partial_time.partial_time","title":"Test for whether a timestamp could be included within parttime uncertainty — includes.partial_time.partial_time","text":"Test whether timestamp included within parttime uncertainty","code":""},{"path":"/reference/includes.partial_time.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for whether a timestamp could be included within parttime uncertainty — includes.partial_time.partial_time","text":"","code":"# S3 method for partial_time includes.partial_time(e1, e2)"},{"path":"/reference/includes.partial_time.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for whether a timestamp could be included within parttime uncertainty — includes.partial_time.partial_time","text":"e1 object test whether includes e2 e2 object test whether included e1","code":""},{"path":"/reference/includes.partial_time.partial_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for whether a timestamp could be included within parttime uncertainty — includes.partial_time.partial_time","text":"","code":"x <- as.parttime(c(\"2019\", \"2019-03-01\", \"2019-03\",    \"2018\",    \"\",     \"2018\", \"\")) #> Warning: Values could not be parsed (2 of 7 (28.6%)). Examples of unique failing #> formats: #>  #>     ''   y <- as.parttime(c(\"2019\", \"2019-03\",    \"2019-03-01\", \"2016-05\", \"2018\", \"\",     \"\")) #> Warning: Values could not be parsed (2 of 7 (28.6%)). Examples of unique failing #> formats: #>  #>     ''    includes(x, y) #> [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE"},{"path":"/reference/is.na.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if elements of a partial time vector is NA — is.na.partial_time","title":"Check if elements of a partial time vector is NA — is.na.partial_time","text":"Check elements partial time vector NA","code":""},{"path":"/reference/is.na.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if elements of a partial time vector is NA — is.na.partial_time","text":"","code":"# S3 method for partial_time is.na(x, ...)"},{"path":"/reference/is.na.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if elements of a partial time vector is NA — is.na.partial_time","text":"x partial_time vector test ... additional arguments unused","code":""},{"path":"/reference/is.na.timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if elements of a partial time vector is NA — is.na.timespan","title":"Check if elements of a partial time vector is NA — is.na.timespan","text":"Check elements partial time vector NA","code":""},{"path":"/reference/is.na.timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if elements of a partial time vector is NA — is.na.timespan","text":"","code":"# S3 method for timespan is.na(x, ...)"},{"path":"/reference/is.na.timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if elements of a partial time vector is NA — is.na.timespan","text":"x partial_time vector test ... additional arguments unused","code":""},{"path":"/reference/is.timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for checking timespan inheritance — is.timespan","title":"Shorthand for checking timespan inheritance — is.timespan","text":"Shorthand checking timespan inheritance","code":""},{"path":"/reference/is.timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for checking timespan inheritance — is.timespan","text":"","code":"is.timespan(x)"},{"path":"/reference/is.timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for checking timespan inheritance — is.timespan","text":"x object test","code":""},{"path":"/reference/is_parttime.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for checking partial time inheritance — is_partial_time","title":"Shorthand for checking partial time inheritance — is_partial_time","text":"Shorthand checking partial time inheritance","code":""},{"path":"/reference/is_parttime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for checking partial time inheritance — is_partial_time","text":"","code":"is_partial_time(x)  is.partial_time(x)  is_parttime(x)  is.parttime(x)"},{"path":"/reference/is_parttime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for checking partial time inheritance — is_partial_time","text":"x object test","code":""},{"path":"/reference/is_timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand for checking timespan inheritance — is_timespan","title":"Shorthand for checking timespan inheritance — is_timespan","text":"Shorthand checking timespan inheritance","code":""},{"path":"/reference/is_timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand for checking timespan inheritance — is_timespan","text":"","code":"is_timespan(x)"},{"path":"/reference/is_timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand for checking timespan inheritance — is_timespan","text":"x object test","code":""},{"path":"/reference/max.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the maximum of a vector of partial_time objects — max.partial_time","title":"Get the maximum of a vector of partial_time objects — max.partial_time","text":"Get maximum vector partial_time objects","code":""},{"path":"/reference/max.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the maximum of a vector of partial_time objects — max.partial_time","text":"","code":"# S3 method for partial_time max(..., na.rm = FALSE, na.warn = TRUE)"},{"path":"/reference/max.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the maximum of a vector of partial_time objects — max.partial_time","text":"... partial_time objects na.rm whether NA removed calculating max na.warn whether raise warning NA","code":""},{"path":"/reference/max.partial_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the maximum of a vector of partial_time objects — max.partial_time","text":"","code":"max(parttime(c(\"2019\", \"2018\", \"2019-02\", \"2018-03\"))) #> Warning: NAs introduced by coercion #> <partial_time<YMDhmsZ>[1]>  #> [1] \"0000-00-00 00:00:00.000\""},{"path":"/reference/min.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the minimum of a vector of partial_time objects — min.partial_time","title":"Get the minimum of a vector of partial_time objects — min.partial_time","text":"Get minimum vector partial_time objects","code":""},{"path":"/reference/min.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the minimum of a vector of partial_time objects — min.partial_time","text":"","code":"# S3 method for partial_time min(..., na.rm = FALSE, na.warn = TRUE)"},{"path":"/reference/min.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the minimum of a vector of partial_time objects — min.partial_time","text":"... partial_time objects na.rm whether NA removed calculating min na.warn whether raise warning NA","code":""},{"path":"/reference/neq_parttimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not-equal comparison handler for partial_time objects — neq_parttimes","title":"Not-equal comparison handler for partial_time objects — neq_parttimes","text":"-equal comparison handler partial_time objects","code":""},{"path":"/reference/neq_parttimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not-equal comparison handler for partial_time objects — neq_parttimes","text":"","code":"neq_parttimes(generic, e1, e2)"},{"path":"/reference/neq_parttimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not-equal comparison handler for partial_time objects — neq_parttimes","text":"generic generic operator selected e1 objects e2 objects","code":""},{"path":"/reference/neq_parttimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not-equal comparison handler for partial_time objects — neq_parttimes","text":"","code":"x <- as.parttime(c(\"2019\", \"2018-01\",    NA, \"2011\")) y <- as.parttime(c(\"2019\", \"2018-01-03\", NA, \"2010-01\"))  x != y #> [1]   NA   NA   NA TRUE"},{"path":"/reference/normalize_month_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize days in month back to day limit for a given month — normalize_month_day","title":"Normalize days in month back to day limit for a given month — normalize_month_day","text":"Normalize days month back day limit given month","code":""},{"path":"/reference/normalize_month_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize days in month back to day limit for a given month — normalize_month_day","text":"","code":"normalize_month_day(x)"},{"path":"/reference/normalize_month_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize days in month back to day limit for a given month — normalize_month_day","text":"x vector parttime objects days may exceed viable days month","code":""},{"path":"/reference/normalize_month_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize days in month back to day limit for a given month — normalize_month_day","text":"vector parttime objects normalized days month","code":""},{"path":"/reference/normalize_month_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize days in month back to day limit for a given month — normalize_month_day","text":"","code":"x <- as.parttime(c(\"2019\", \"2019-02-31\", \"2019-01-05\", \"2016-02-31\", \"2016-01-05\")) parttime:::normalize_month_day(x) #> <partial_time<YMDhmsZ>[5]>  #> [1] \"2019\"       \"2019-02-28\" \"2019-01-05\" \"2016-02-29\" \"2016-01-05\""},{"path":"/reference/parse_failure_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a message communicating parse failure information — parse_failure_message","title":"Format a message communicating parse failure information — parse_failure_message","text":"Format message communicating parse failure information","code":""},{"path":"/reference/parse_failure_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a message communicating parse failure information — parse_failure_message","text":"","code":"parse_failure_message(input, output)"},{"path":"/reference/parse_failure_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a message communicating parse failure information — parse_failure_message","text":"input input provided parser output parttimes returned parser","code":""},{"path":"/reference/parse_failure_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a message communicating parse failure information — parse_failure_message","text":"message communicating failure modes NAs introduced output present input","code":""},{"path":"/reference/parse_iso8601_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","title":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","text":"\"iso8601 matrix\" matrix various capture groups extraced iso8601 datetime string. groups represent superset fields used partial time objects, including representation less common datetime formats like yeardays, yearweeks weekdays. standard provides number different combinations fields represent valid strings, functions serves provide convenience functions testing manipulating less canonical representations.","code":""},{"path":"/reference/parse_iso8601_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","text":"","code":"is_iso8601_form(x, fields)  is_iso8601_weekday(x)  is_iso8601_yearday(x)  is_iso8601_minfrac(x)  recalc_md_from_weekday(x)  recalc_md_from_yearday(x)  recalc_sec_from_minfrac(x)"},{"path":"/reference/parse_iso8601_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","text":"x numeric matrix possible iso8601 fields fields character vector fields","code":""},{"path":"/reference/parse_iso8601_helpers.html","id":"is-iso-functions","dir":"Reference","previous_headings":"","what":"is_iso8601_* functions","title":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","text":"Test whether rows matrix represent specific form, evident non-missing values specific fields.","code":""},{"path":"/reference/parse_iso8601_helpers.html","id":"recalc-functions","dir":"Reference","previous_headings":"","what":"recalc_* functions","title":"Inspecting and manipulating intermediate iso8601 matrices — parse_iso8601_helpers","text":"Calculate canonical datetime fields alternative representations","code":""},{"path":"/reference/parse_iso8601_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse an iso8601 datetime to a parttime-like matrix — parse_iso8601_matrix","title":"Parse an iso8601 datetime to a parttime-like matrix — parse_iso8601_matrix","text":"Parse iso8601 datetime parttime-like matrix","code":""},{"path":"/reference/parse_iso8601_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse an iso8601 datetime to a parttime-like matrix — parse_iso8601_matrix","text":"","code":"parse_iso8601_matrix(dates)"},{"path":"/reference/parse_iso8601_matrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parse an iso8601 datetime to a parttime-like matrix — parse_iso8601_matrix","text":"addition parttime matrix fields, returned matrix additional columns alternative iso8601 formats yearday, yearweek codeweakday.","code":""},{"path":"/reference/parse_parttime.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","title":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","text":"Parse cdisc datetime strings parttime matrix Parse iso8601 datetime strings parttime matrix Parse iso8601 datetime strings timespan array Parse character vector create matrix datetime fields","code":""},{"path":"/reference/parse_parttime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","text":"","code":"parse_cdisc_datetime(x, warn = TRUE, ...)  parse_iso8601_datetime(x, warn = TRUE, ...)  parse_iso8601_datetime_as_timespan(x, ...)  parse_to_parttime_matrix(dates, regex = re_iso8601)"},{"path":"/reference/parse_parttime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","text":"x character vector iso8601 datetime strings warn logical indicating whether warn information loss coercing parttime matrix. ... Additional arguments unused dates character vector dates parse iso8601 components regex regular expression used parsing parttime strings. Defaults parser ISO8601 standard. include named capture groups datetime field. See Details information.","code":""},{"path":"/reference/parse_parttime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","text":"format regular expression separate components valid datetime string, capturing strings can coerced numeric values nine datetime fields: year month day hour min sec secfrac tzhour tzmin","code":""},{"path":"/reference/parse_parttime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Parse cdisc datetime strings as parttime matrix — parse_cdisc_datetime","text":"timespan array internal data structure used backend representation timespan objects. consists two parttime-like matrices (addition \"inclusive\" column), one lower- upper-bounds timespan. Collectively, amounts three dimensional array.","code":""},{"path":"/reference/parttime.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a parttime object — parttime","title":"Create a parttime object — parttime","text":"Create parttime object","code":""},{"path":"/reference/parttime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a parttime object — parttime","text":"","code":"parttime(   year = NA,   month = NA,   day = NA,   hour = NA,   min = NA,   sec = NA,   tzhour = interpret_tz(getOption(\"parttime.assume_tz_offset\", NA))%/%60,   tzmin = interpret_tz(getOption(\"parttime.assume_tz_offset\", NA))%%60 )"},{"path":"/reference/parttime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a parttime object — parttime","text":"year numeric vector use partial time year component month numeric vector use partial time month component day numeric vector use partial time day component hour numeric vector use partial time hour component min numeric vector use partial time min component sec numeric vector use partial time sec component tzhour numeric vector use partial time tzhour component tzmin numeric vector use partial time tzmin component","code":""},{"path":"/reference/parttime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a parttime object — parttime","text":"","code":"parttime(2019) #> <partial_time<YMDhmsZ>[1]>  #> [1] \"2019\""},{"path":"/reference/parttime_access_and_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Datetime component access and assignment functions — parttime_access_and_assign","title":"Datetime component access and assignment functions — parttime_access_and_assign","text":"Datetime component access assignment functions","code":""},{"path":"/reference/parttime_access_and_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Datetime component access and assignment functions — parttime_access_and_assign","text":"","code":"year(x)  year(x) <- value  month(x)  month(x) <- value  mday(x)  mday(x) <- value  day(x)  day(x) <- value  hour(x)  hour(x) <- value  minute(x)  minute(x) <- value  second(x)  second(x) <- value  tz(x)  tz(x) <- value  # S3 method for partial_time year(x)  # S3 method for partial_time year(x) <- value  # S4 method for partial_time year(x) <- value  # S3 method for partial_time month(x)  # S3 method for partial_time month(x) <- value  # S4 method for partial_time month(x) <- value  # S3 method for partial_time mday(x)  # S3 method for partial_time day(x) <- value  # S4 method for partial_time day(x) <- value  # S3 method for partial_time hour(x)  # S3 method for partial_time hour(x) <- value  # S4 method for partial_time hour(x) <- value  # S3 method for partial_time minute(x)  # S3 method for partial_time minute(x) <- value  # S4 method for partial_time minute(x) <- value  # S3 method for partial_time second(x)  # S3 method for partial_time second(x) <- value  # S4 method for partial_time second(x) <- value  # S3 method for partial_time tz(x)  # S3 method for partial_time tz(x) <- value"},{"path":"/reference/parttime_access_and_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Datetime component access and assignment functions — parttime_access_and_assign","text":"x time-like object access assign value assignment, value assign","code":""},{"path":"/reference/parttime_access_and_assign.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Datetime component access and assignment functions — parttime_access_and_assign","text":"Care taken make functionas compatible possible similar datetime packages. However, functions may masked cause errors using masking functions.","code":""},{"path":"/reference/parttime_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing operators for partial_time objects — parttime_extract","title":"Indexing operators for partial_time objects — parttime_extract","text":"Indexing operators repurpose matrix indexing indexing parttime fields. provided, parttime vector sliced. Whenever j provided, individual fields indexed internal matrix.","code":""},{"path":"/reference/parttime_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing operators for partial_time objects — parttime_extract","text":"","code":"# S3 method for partial_time [(x, i, j, ...)  # S3 method for partial_time [[(x, i, j, ..., value)  # S3 method for partial_time [(x, i, j, ..., reflow = TRUE) <- value  # S3 method for partial_time [[(x, i, ...) <- value"},{"path":"/reference/parttime_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexing operators for partial_time objects — parttime_extract","text":"x object extract element(s) replace element(s). indicies specifying elements extract replace. details, see Extract. j column indicies specifying element(s) extract replace. details, see Extract. ... arguments unused value typically array-like R object similar class     x. reflow logical indicating whether modified data fields reflowed, cascading range overflow. Setting FALSE permits invalid dates, saves compute. Generally, disabled multiple calculations performed back--back dates need reflowed end calculation.","code":""},{"path":"/reference/parttime_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexing operators for partial_time objects — parttime_extract","text":"","code":"x <- as.parttime(c(\"2019\", \"2019-02\", \"2019-02-02\")) # <partial_time<YMDhms+tz>[3]> # [1] \"2019\"       \"2019-02\"    \"2019-02-02\"  x[, c(1, 3)] #>            year day #> 2019       2019  NA #> 2019-02    2019  NA #> 2019-02-02 2019   2 #            year day # 2019       2019  NA # 2019-02    2019  NA # 2019-02-02 2019   2  x[, \"month\"] #>       2019    2019-02 2019-02-02  #>         NA          2          2  #       2019    2019-02 2019-02-02 #         NA          2          2  x[, \"month\", drop = FALSE] #>            month #> 2019          NA #> 2019-02        2 #> 2019-02-02     2 #            month # 2019          NA # 2019-02        2 # 2019-02-02     2  x <- as.parttime(c(\"2019\", \"2019-02\", \"2019-02-02\")) # <partial_time<YMDhms+tz>[3]> # [1] \"2019\"       \"2019-02\"    \"2019-02-02\"  x[c(1, 3)] <- as.parttime(c(\"2000\", \"1999\")) # <partial_time<YMDhms+tz>[3]> # [1] \"2000\"    \"2019-02\" \"1999\"  x[,\"month\"] <- 3 # <partial_time<YMDhms+tz>[3]> # [1] \"2000-03\" \"2019-03\" \"1999-03\""},{"path":"/reference/parttime_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"This class is purely for retaining logical information for immediate\ntruncation as to not overccomplicate coersion needs with another vctr class — parttime_logical","title":"This class is purely for retaining logical information for immediate\ntruncation as to not overccomplicate coersion needs with another vctr class — parttime_logical","text":"class purely retaining logical information immediate truncation overccomplicate coersion needs another vctr class","code":""},{"path":"/reference/parttime_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This class is purely for retaining logical information for immediate\ntruncation as to not overccomplicate coersion needs with another vctr class — parttime_logical","text":"","code":"parttime_logical(x)"},{"path":"/reference/parttime_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This class is purely for retaining logical information for immediate\ntruncation as to not overccomplicate coersion needs with another vctr class — parttime_logical","text":"x create parttime logical store logical matrix following parttime comparison operations","code":""},{"path":"/reference/plus-partial_time-Period-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Addition of a lubridate Period to a parttime partial_time — +,partial_time,Period-method","title":"Addition of a lubridate Period to a parttime partial_time — +,partial_time,Period-method","text":"Addition lubridate Period parttime partial_time","code":""},{"path":"/reference/plus-partial_time-Period-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Addition of a lubridate Period to a parttime partial_time — +,partial_time,Period-method","text":"","code":"# S4 method for partial_time,Period +(e1, e2)"},{"path":"/reference/plus-partial_time-Period-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Addition of a lubridate Period to a parttime partial_time — +,partial_time,Period-method","text":"e1 partial_time object e2 lubridate Period object","code":""},{"path":"/reference/pmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxima and Minima — pmax","title":"Maxima and Minima — pmax","text":"Returns (regular parallel) maxima minima   input values. pmax*() pmin*() take one vectors   arguments, recycle common length return single vector   giving ‘parallel’ maxima (minima) argument   vectors.","code":""},{"path":"/reference/pmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxima and Minima — pmax","text":"","code":"pmax(..., na.rm = FALSE)"},{"path":"/reference/pmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maxima and Minima — pmax","text":"... numeric character arguments (see Note). na.rm logical indicating whether missing values     removed.","code":""},{"path":"/reference/pmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maxima and Minima — pmax","text":"min max, length-one vector.  pmin  pmax, vector length longest input vectors,   length zero one inputs zero length. type result highest inputs   hierarchy integer < double < character. min max numeric inputs   empty (possible removal NAs), result double   (Inf -Inf).","code":""},{"path":"/reference/pmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maxima and Minima — pmax","text":"max min return maximum minimum    values present arguments, integer   logical integer, double   numeric, character otherwise. na.rm FALSE NA value   arguments cause value NA returned, otherwise   NA values ignored. minimum maximum numeric empty set +Inf   -Inf (order!) ensures transitivity, e.g.,   min(x1, min(x2)) == min(x1, x2).  numeric x   max(x) == -Inf min(x) == +Inf   whenever length(x) == 0 (removing missing values   requested).  However, pmax pmin return   NA parallel elements NA even   na.rm = TRUE. pmax pmin take one vectors (matrices)   arguments return single vector giving ‘parallel’   maxima (minima) vectors.  first element result   maximum (minimum) first elements arguments,   second element result maximum (minimum) second   elements arguments .  Shorter inputs (non-zero   length) recycled necessary.  Attributes (see   attributes: names   dim) copied first argument (applicable,   e.g., S4 object). pmax.int pmin.int faster internal versions   used arguments atomic vectors classes:   drop attributes.  (Note versions fail raw   complex vectors since ordering.) max min generic functions: methods can   defined individually via   Summary group generic.    work properly, arguments ... unnamed,   dispatch first argument. definition min/max numeric vector containing NaN   NaN, except min/max vector containing   NA NA even also contains NaN.   Note max(NA, Inf) == NA even though maximum   Inf whatever missing value actually . Character versions sorted lexicographically, depends   collating sequence locale use: help   ‘Comparison’ gives details.  max/min empty   character vector defined character NA.  (One   argue \"\" smallest character element, maximum   \"\", obvious candidate   minimum.)","code":""},{"path":"/reference/pmax.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Maxima and Minima — pmax","text":"‘Numeric’ arguments vectors type integer numeric,   logical (coerced integer).  historical reasons, NULL   accepted equivalent integer(0). pmax pmin also work classed S3 S4 objects   appropriate methods comparison, .na rep   (recycling arguments needed).","code":""},{"path":"/reference/pmax.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S4 methods","title":"Maxima and Minima — pmax","text":"max min part S4   Summary group generic.  Methods   must use signature x, ..., na.rm.","code":""},{"path":"/reference/pmax.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maxima and Minima — pmax","text":"Becker, R. ., Chambers, J. M. Wilks, . R. (1988)   New S Language.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"/reference/pmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maxima and Minima — pmax","text":"","code":"require(stats); require(graphics)  min(5:1, pi) #-> one number #> [1] 1 pmin(5:1, pi) #->  5  numbers #> [1] 3.141593 3.141593 3.000000 2.000000 1.000000  x <- sort(rnorm(100));  cH <- 1.35 pmin(cH, quantile(x)) # no names #> [1] -1.79112481 -0.62437312  0.05977803  0.64432249  1.35000000 pmin(quantile(x), cH) # has names #>          0%         25%         50%         75%        100%  #> -1.79112481 -0.62437312  0.05977803  0.64432249  1.35000000  plot(x, pmin(cH, pmax(-cH, x)), type = \"b\", main =  \"Huber's function\")   cut01 <- function(x) pmax(pmin(x, 1), 0) curve(      x^2 - 1/4, -1.4, 1.5, col = 2) curve(cut01(x^2 - 1/4), col = \"blue\", add = TRUE, n = 500)  ## pmax(), pmin() preserve attributes of *first* argument D <- diag(x = (3:1)/4) ; n0 <- numeric() stopifnot(identical(D,  cut01(D) ),           identical(n0, cut01(n0)),           identical(n0, cut01(NULL)),           identical(n0, pmax(3:1, n0, 2)),           identical(n0, pmax(n0, 4)))"},{"path":"/reference/pmax.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the elementwise maximum of vectors of partial_time objects — pmax.partial_time","title":"Get the elementwise maximum of vectors of partial_time objects — pmax.partial_time","text":"Get elementwise maximum vectors partial_time objects","code":""},{"path":"/reference/pmax.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the elementwise maximum of vectors of partial_time objects — pmax.partial_time","text":"","code":"# S3 method for partial_time pmax(..., na.rm = FALSE)"},{"path":"/reference/pmax.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the elementwise maximum of vectors of partial_time objects — pmax.partial_time","text":"... numeric character arguments (see Note). na.rm logical indicating whether missing values     removed.","code":""},{"path":"/reference/pmax.partial_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the elementwise maximum of vectors of partial_time objects — pmax.partial_time","text":"","code":"pmax(   parttime(c(\"2019\", \"2018\", \"2019-02\", \"2018\",    \"2010\")),   parttime(c(\"2020\", NA,     \"2019-03\", \"2018-01\", \"2010\")) ) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> <partial_time<YMDhmsZ>[5]>  #> [1] \"2020\"                    \"0000-00-00 00:00:00.000\" #> [3] \"0000-00-00 00:00:00.000\" \"0000-00-00 00:00:00.000\" #> [5] \"2010\""},{"path":"/reference/pmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Maxima and Minima — pmin","title":"Maxima and Minima — pmin","text":"Returns (regular parallel) maxima minima   input values. pmax*() pmin*() take one vectors   arguments, recycle common length return single vector   giving ‘parallel’ maxima (minima) argument   vectors.","code":""},{"path":"/reference/pmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maxima and Minima — pmin","text":"","code":"pmin(..., na.rm = FALSE)"},{"path":"/reference/pmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maxima and Minima — pmin","text":"... numeric character arguments (see Note). na.rm logical indicating whether missing values     removed.","code":""},{"path":"/reference/pmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maxima and Minima — pmin","text":"min max, length-one vector.  pmin  pmax, vector length longest input vectors,   length zero one inputs zero length. type result highest inputs   hierarchy integer < double < character. min max numeric inputs   empty (possible removal NAs), result double   (Inf -Inf).","code":""},{"path":"/reference/pmin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maxima and Minima — pmin","text":"max min return maximum minimum    values present arguments, integer   logical integer, double   numeric, character otherwise. na.rm FALSE NA value   arguments cause value NA returned, otherwise   NA values ignored. minimum maximum numeric empty set +Inf   -Inf (order!) ensures transitivity, e.g.,   min(x1, min(x2)) == min(x1, x2).  numeric x   max(x) == -Inf min(x) == +Inf   whenever length(x) == 0 (removing missing values   requested).  However, pmax pmin return   NA parallel elements NA even   na.rm = TRUE. pmax pmin take one vectors (matrices)   arguments return single vector giving ‘parallel’   maxima (minima) vectors.  first element result   maximum (minimum) first elements arguments,   second element result maximum (minimum) second   elements arguments .  Shorter inputs (non-zero   length) recycled necessary.  Attributes (see   attributes: names   dim) copied first argument (applicable,   e.g., S4 object). pmax.int pmin.int faster internal versions   used arguments atomic vectors classes:   drop attributes.  (Note versions fail raw   complex vectors since ordering.) max min generic functions: methods can   defined individually via   Summary group generic.    work properly, arguments ... unnamed,   dispatch first argument. definition min/max numeric vector containing NaN   NaN, except min/max vector containing   NA NA even also contains NaN.   Note max(NA, Inf) == NA even though maximum   Inf whatever missing value actually . Character versions sorted lexicographically, depends   collating sequence locale use: help   ‘Comparison’ gives details.  max/min empty   character vector defined character NA.  (One   argue \"\" smallest character element, maximum   \"\", obvious candidate   minimum.)","code":""},{"path":"/reference/pmin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Maxima and Minima — pmin","text":"‘Numeric’ arguments vectors type integer numeric,   logical (coerced integer).  historical reasons, NULL   accepted equivalent integer(0). pmax pmin also work classed S3 S4 objects   appropriate methods comparison, .na rep   (recycling arguments needed).","code":""},{"path":"/reference/pmin.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S4 methods","title":"Maxima and Minima — pmin","text":"max min part S4   Summary group generic.  Methods   must use signature x, ..., na.rm.","code":""},{"path":"/reference/pmin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maxima and Minima — pmin","text":"Becker, R. ., Chambers, J. M. Wilks, . R. (1988)   New S Language.   Wadsworth & Brooks/Cole.","code":""},{"path":[]},{"path":"/reference/pmin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maxima and Minima — pmin","text":"","code":"require(stats); require(graphics)  min(5:1, pi) #-> one number #> [1] 1 pmin(5:1, pi) #->  5  numbers #> [1] 3.141593 3.141593 3.000000 2.000000 1.000000  x <- sort(rnorm(100));  cH <- 1.35 pmin(cH, quantile(x)) # no names #> [1] -1.51645839 -0.65307055  0.04984499  0.68479976  1.35000000 pmin(quantile(x), cH) # has names #>          0%         25%         50%         75%        100%  #> -1.51645839 -0.65307055  0.04984499  0.68479976  1.35000000  plot(x, pmin(cH, pmax(-cH, x)), type = \"b\", main =  \"Huber's function\")   cut01 <- function(x) pmax(pmin(x, 1), 0) curve(      x^2 - 1/4, -1.4, 1.5, col = 2) curve(cut01(x^2 - 1/4), col = \"blue\", add = TRUE, n = 500)  ## pmax(), pmin() preserve attributes of *first* argument D <- diag(x = (3:1)/4) ; n0 <- numeric() stopifnot(identical(D,  cut01(D) ),           identical(n0, cut01(n0)),           identical(n0, cut01(NULL)),           identical(n0, pmax(3:1, n0, 2)),           identical(n0, pmax(n0, 4)))"},{"path":"/reference/pmin.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the elementwise minimum of vectors of partial_time objects — pmin.partial_time","title":"Get the elementwise minimum of vectors of partial_time objects — pmin.partial_time","text":"Get elementwise minimum vectors partial_time objects","code":""},{"path":"/reference/pmin.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the elementwise minimum of vectors of partial_time objects — pmin.partial_time","text":"","code":"# S3 method for partial_time pmin(..., na.rm = FALSE)"},{"path":"/reference/pmin.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the elementwise minimum of vectors of partial_time objects — pmin.partial_time","text":"... numeric character arguments (see Note). na.rm logical indicating whether missing values     removed.","code":""},{"path":"/reference/possibly.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"\"Possibly\" generic resolving uncertainty","code":""},{"path":"/reference/possibly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"possibly(x, ...)"},{"path":"/reference/possibly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"x uncertain object resolve ... additional paramters used class-specific functions","code":""},{"path":[]},{"path":"/reference/possibly.partial_time_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether a partial_time logical matrix is possibly TRUE — possibly.partial_time_logical","title":"Determine whether a partial_time logical matrix is possibly TRUE — possibly.partial_time_logical","text":"Determine whether partial_time logical matrix possibly TRUE","code":""},{"path":"/reference/possibly.partial_time_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether a partial_time logical matrix is possibly TRUE — possibly.partial_time_logical","text":"","code":"# S3 method for partial_time_logical possibly(x, by = ncol(attr(x, \"pttm_lgl\")), ...)"},{"path":"/reference/possibly.partial_time_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine whether a partial_time logical matrix is possibly TRUE — possibly.partial_time_logical","text":"x partial_time_logical matrix coersion resolution assessment, column index ... additional arguments unused","code":""},{"path":"/reference/possibly.partial_time_logical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine whether a partial_time logical matrix is possibly TRUE — possibly.partial_time_logical","text":"","code":"x <- as.parttime(c(\"\",     \"2019-02\",    \"2019-01-02\")) #> Warning: Values could not be parsed (1 of 3 (33.3%)). Examples of unique failing #> formats: #>  #>     ''   y <- as.parttime(c(\"2018\", \"2019-02-01\", \"2018\"))  possibly(x != y) #> [1] TRUE TRUE TRUE possibly(x != y, by = \"month\") #> [1]  TRUE FALSE  TRUE"},{"path":"/reference/propagate_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Propegate field missingness from higher to lower resolution — propagate_na","title":"Propegate field missingness from higher to lower resolution — propagate_na","text":"Propegate field missingness higher lower resolution","code":""},{"path":"/reference/propagate_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propegate field missingness from higher to lower resolution — propagate_na","text":"","code":"propagate_na(x, keep_tz = FALSE)"},{"path":"/reference/propagate_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propegate field missingness from higher to lower resolution — propagate_na","text":"x vector parttime objects days may exceed viable days month keep_tz logical indicating whether retain timezone fields, even fields missing","code":""},{"path":"/reference/propagate_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propegate field missingness from higher to lower resolution — propagate_na","text":"vector parttime objects missingness propagated lower resolution time fields","code":""},{"path":"/reference/propagate_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propegate field missingness from higher to lower resolution — propagate_na","text":"","code":"x <- as.parttime(c(\"2019\", \"2019-02-31\", \"2019-01-05\", \"2016-02-31\",   \"2016-01-05\", \"2020-01-01 03:04:05.1234\")) vctrs::field(x, \"pttm_mat\")[,\"min\"] <- 23 parttime:::propagate_na(x) #> <partial_time<YMDhms+tz>[6]>  #> [1] \"2019\"                    \"2019-02-31\"              #> [3] \"2019-01-05\"              \"2016-02-31\"              #> [5] \"2016-01-05\"              \"2020-01-01 03:23:05.123\""},{"path":"/reference/re_cdisc_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression for CDISC-style datetime parsing — re_cdisc_datetime","title":"Regular expression for CDISC-style datetime parsing — re_cdisc_datetime","text":"Regular expression CDISC-style datetime parsing","code":""},{"path":"/reference/re_cdisc_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression for CDISC-style datetime parsing — re_cdisc_datetime","text":"","code":"re_cdisc_datetime"},{"path":"/reference/re_cdisc_datetime.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression for CDISC-style datetime parsing — re_cdisc_datetime","text":"object class character length 1.","code":""},{"path":"/reference/re_iso8601.html","id":null,"dir":"Reference","previous_headings":"","what":"slightly modified from parsedate - added 'secfrac' capture group — re_iso8601","title":"slightly modified from parsedate - added 'secfrac' capture group — re_iso8601","text":"slightly modified parsedate - added 'secfrac' capture group","code":""},{"path":"/reference/re_iso8601.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slightly modified from parsedate - added 'secfrac' capture group — re_iso8601","text":"","code":"re_iso8601"},{"path":"/reference/re_iso8601.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"slightly modified from parsedate - added 'secfrac' capture group — re_iso8601","text":"object class character length 1.","code":""},{"path":"/reference/reflow_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflow potentially invalid time components to adjacent fields — reflow_fields","title":"Reflow potentially invalid time components to adjacent fields — reflow_fields","text":"Reflow potentially invalid time components adjacent fields","code":""},{"path":"/reference/reflow_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflow potentially invalid time components to adjacent fields — reflow_fields","text":"","code":"reflow_fields(fmat, days)"},{"path":"/reference/reflow_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reflow potentially invalid time components to adjacent fields — reflow_fields","text":"fmat fields matrix part partial_time partial_difftime days logical indicating whether year month consolidated total days. integer provided, days represent \"leap-time\" add top non-leap conversion.","code":""},{"path":"/reference/reflow_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reflow potentially invalid time components to adjacent fields — reflow_fields","text":"fields matrix appropriately ranged time components","code":""},{"path":"/reference/reflow_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reflow potentially invalid time components to adjacent fields — reflow_fields","text":"","code":"# example with difftimes (when you only care about days of change)  x <- as.parttime(\"2019-06-23 04:33:21.123\") y <- as.parttime(\"2018-02-08 12:59:28.987\")  diff_fields <- vctrs::field(x, \"pttm_mat\") - vctrs::field(y, \"pttm_mat\")  parttime:::reflow_fields(diff_fields) #>                         year month day hour min sec secfrac tzhour tzmin #> 2019-06-23 04:33:21.123    1     4  14   15  33  52   0.136      0     0  # if we want to assume 0.25 leap days per year parttime:::reflow_fields(diff_fields, days = TRUE) #>                         year month day hour min sec secfrac tzhour tzmin #> 2019-06-23 04:33:21.123   NA    NA 469   21  33  52   0.136      0     0  # if we want to assert that there were no leap days parttime:::reflow_fields(diff_fields, days = 0) #>                         year month day hour min sec secfrac tzhour tzmin #> 2019-06-23 04:33:21.123   NA    NA 469   15  33  52   0.136      0     0"},{"path":"/reference/register_unknown_s3_generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Export S3 generics only if as-of-yet unknown — register_unknown_s3_generics","title":"Export S3 generics only if as-of-yet unknown — register_unknown_s3_generics","text":"S3 generics often (unfortunately) tethered specific packages. order provide functional generic can dispatch parttime classes, also preventing generics masking generics packages attach, want export generics generic name.","code":""},{"path":"/reference/register_unknown_s3_generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export S3 generics only if as-of-yet unknown — register_unknown_s3_generics","text":"","code":"register_unknown_s3_generics(fns)"},{"path":"/reference/sample_date_string_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unique forms of inputs — sample_date_string_styles","title":"Find unique forms of inputs — sample_date_string_styles","text":"Find unique forms inputs","code":""},{"path":"/reference/sample_date_string_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unique forms of inputs — sample_date_string_styles","text":"","code":"sample_date_string_styles(x)"},{"path":"/reference/sample_date_string_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unique forms of inputs — sample_date_string_styles","text":"x character vector datetime strings","code":""},{"path":"/reference/sample_date_string_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unique forms of inputs — sample_date_string_styles","text":"indices first instance unique datatime formats","code":""},{"path":"/reference/sample_date_string_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unique forms of inputs — sample_date_string_styles","text":"","code":"x <- c(\"2022\", \"T02:01\", \"2023\", \"Y1970\", \"2021-01\", \"2024-12\") x[parttime:::sample_date_string_styles(x)] #> [1] \"2022\"    \"T02:01\"  \"Y1970\"   \"2021-01\""},{"path":"/reference/sample_partial_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unique forms of missingness — sample_partial_styles","title":"Find unique forms of missingness — sample_partial_styles","text":"Find unique forms missingness","code":""},{"path":"/reference/sample_partial_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unique forms of missingness — sample_partial_styles","text":"","code":"sample_partial_styles(x)"},{"path":"/reference/sample_partial_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unique forms of missingness — sample_partial_styles","text":"x partial_time vector","code":""},{"path":"/reference/sample_partial_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unique forms of missingness — sample_partial_styles","text":"indices first instance unique forms missingness","code":""},{"path":"/reference/sample_partial_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unique forms of missingness — sample_partial_styles","text":"","code":"x <- as.parttime(c(\"2022\", \"2023\", \"2021-01\", \"2024-12\")) x[parttime:::sample_partial_styles(x)] #> <partial_time<YMDhmsZ>[2]>  #> [1] \"2022\"    \"2021-01\""},{"path":"/reference/start.html","id":null,"dir":"Reference","previous_headings":"","what":"start S3 generic — start","title":"start S3 generic — start","text":"generic method retrieve start object","code":""},{"path":"/reference/start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"start S3 generic — start","text":"","code":"start(x, ...)"},{"path":"/reference/start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"start S3 generic — start","text":"x object retrieve start ... Additional arguments passed methods","code":""},{"path":"/reference/timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a timespan object — timespan","title":"Create a timespan object — timespan","text":"Create timespan object","code":""},{"path":"/reference/timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a timespan object — timespan","text":"","code":"timespan(start, end, inclusive = c(TRUE, FALSE))"},{"path":"/reference/timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a timespan object — timespan","text":"start vector datetime objects start timespans end vector datetime objects end timespans inclusive vector matrix logicals row composed two logical values indicating whether timespan start end inclusive respectively","code":""},{"path":"/reference/to_gmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for coercing timestamps to GMT timezone — to_gmt","title":"Generic for coercing timestamps to GMT timezone — to_gmt","text":"Generic coercing timestamps GMT timezone","code":""},{"path":"/reference/to_gmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for coercing timestamps to GMT timezone — to_gmt","text":"","code":"to_gmt(x)"},{"path":"/reference/to_gmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for coercing timestamps to GMT timezone — to_gmt","text":"x object coerce GMT time","code":""},{"path":"/reference/trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten a timespan — trim","title":"Shorten a timespan — trim","text":"Shorten timespan","code":""},{"path":"/reference/trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten a timespan — trim","text":"","code":"trim(x, ...)"},{"path":"/reference/trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten a timespan — trim","text":"x timespan object trim ... additional arguments passed functions","code":""},{"path":"/reference/vec_cast.logical.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast partial time to logical — vec_cast.logical.partial_time","title":"Cast partial time to logical — vec_cast.logical.partial_time","text":"Cast partial time logical","code":""},{"path":"/reference/vec_cast.logical.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast partial time to logical — vec_cast.logical.partial_time","text":"","code":"# S3 method for logical.partial_time vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.logical.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast partial time to logical — vec_cast.logical.partial_time","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.partial_time.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce character date representations to parttime objects — vec_cast.partial_time.character","title":"Coerce character date representations to parttime objects — vec_cast.partial_time.character","text":"Coerce character date representations parttime objects","code":""},{"path":"/reference/vec_cast.partial_time.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce character date representations to parttime objects — vec_cast.partial_time.character","text":"","code":"# S3 method for partial_time.character vec_cast(x, to, ..., format = parse_iso8601_datetime, on.na = warning)"},{"path":"/reference/vec_cast.partial_time.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce character date representations to parttime objects — vec_cast.partial_time.character","text":"x Vectors cast. Type cast . NULL, x returned . ... Additional arguments passed format function provided. format function character value. function, accept character vector return matrix parttime components. character provide regular exprssion contains capture groups parttime components.  See parse_to_parttime_matrix's regex parameter details. .na function used signal condition new NA values introduced coercion, character value among \"error\", \"warning\" \"suppress\" (silencing messages) NULL equivalent \"suppress\".","code":""},{"path":"/reference/vec_cast.partial_time.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce character date representations to parttime objects — vec_cast.partial_time.character","text":"","code":"dates <- c(   NA,   \"2001\",   \"2002-01-01\",   \"2004-245\", # yearday   \"2005-W13\",  # yearweek   \"2006-W02-5\",  # yearweek + weekday   \"2007-10-01T08\",   \"2008-09-20T08:35\",   \"2009-08-12T08:35.048\",  # fractional minute   \"2010-07-22T08:35:32\",   \"2011-06-13T08:35:32.123\",  # fractional second   \"2012-05-23T08:35:32.123Z\",  # Zulu time   \"2013-04-14T08:35:32.123+05\",  # time offset from GMT   \"2014-03-24T08:35:32.123+05:30\",  # time offset with min from GMT   \"20150101T08:35:32.123+05:30\"  # condensed form )  as.parttime(dates) #> Warning: Date strings including week and excluding weekday can not be fully #> represented. To avoid loss of datetime resolution, such partial dates #> are best represented as timespans. See `?timespan`. #> <partial_time<YMDhms+tz>[15]>  #>  [1] NA                             \"2001\"                         #>  [3] \"2002-01-01\"                   \"2004-09-01\"                   #>  [5] \"2005\"                         \"2006-01-12\"                   #>  [7] \"2007-10-01 08\"                \"2008-09-20 08:35\"             #>  [9] \"2009-08-12 08:35:02.880\"      \"2010-07-22 08:35:32.000\"      #> [11] \"2011-06-13 08:35:32.123\"      \"2012-05-23 08:35:32.123\"      #> [13] \"2013-04-14 08:35:32.123+0500\" \"2014-03-24 08:35:32.123+0530\" #> [15] \"2015-01-01 08:35:32.123+0530\""},{"path":"/reference/vec_cast.partial_time.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default handler for casting to a partial time — vec_cast.partial_time.default","title":"Default handler for casting to a partial time — vec_cast.partial_time.default","text":"Default handler casting partial time","code":""},{"path":"/reference/vec_cast.partial_time.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default handler for casting to a partial time — vec_cast.partial_time.default","text":"","code":"# S3 method for partial_time.default vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.partial_time.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default handler for casting to a partial time — vec_cast.partial_time.default","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast to partial time object — vec_cast.partial_time","title":"Cast to partial time object — vec_cast.partial_time","text":"Cast partial time object","code":""},{"path":"/reference/vec_cast.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast to partial time object — vec_cast.partial_time","text":"","code":"vec_cast.partial_time(x, to, ...)"},{"path":"/reference/vec_cast.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast to partial time object — vec_cast.partial_time","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.partial_time.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast a matrix to a partial time — vec_cast.partial_time.matrix","title":"Cast a matrix to a partial time — vec_cast.partial_time.matrix","text":"Cast matrix partial time","code":""},{"path":"/reference/vec_cast.partial_time.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast a matrix to a partial time — vec_cast.partial_time.matrix","text":"","code":"# S3 method for partial_time.matrix vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.partial_time.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast a matrix to a partial time — vec_cast.partial_time.matrix","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.timespan.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.character","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.character","text":"Cast partial time timespan, representing uncertainty range","code":""},{"path":"/reference/vec_cast.timespan.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.character","text":"","code":"# S3 method for timespan.character vec_cast(x, to, ..., format = parse_iso8601_datetime_as_timespan)"},{"path":"/reference/vec_cast.timespan.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.character","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty. format function character value. function, accept character vector return matrix parttime components. character provide regular exprssion contains capture groups parttime components.  See parse_to_parttime_matrix's regex parameter details.","code":""},{"path":"/reference/vec_cast.timespan.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default handler for casting to a timespan — vec_cast.timespan.default","title":"Default handler for casting to a timespan — vec_cast.timespan.default","text":"Default handler casting timespan","code":""},{"path":"/reference/vec_cast.timespan.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default handler for casting to a timespan — vec_cast.timespan.default","text":"","code":"# S3 method for timespan.default vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.timespan.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default handler for casting to a timespan — vec_cast.timespan.default","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.timespan.double.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast an array to a timespan — vec_cast.timespan.double","title":"Cast an array to a timespan — vec_cast.timespan.double","text":"Cast array timespan","code":""},{"path":"/reference/vec_cast.timespan.double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast an array to a timespan — vec_cast.timespan.double","text":"","code":"# S3 method for timespan.double vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.timespan.double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast an array to a timespan — vec_cast.timespan.double","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast to timespan object — vec_cast.timespan","title":"Cast to timespan object — vec_cast.timespan","text":"Cast timespan object","code":""},{"path":"/reference/vec_cast.timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast to timespan object — vec_cast.timespan","text":"","code":"vec_cast.timespan(x, to, ...)"},{"path":"/reference/vec_cast.timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast to timespan object — vec_cast.timespan","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.timespan.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast an array to a timespan — vec_cast.timespan.numeric","title":"Cast an array to a timespan — vec_cast.timespan.numeric","text":"Cast array timespan","code":""},{"path":"/reference/vec_cast.timespan.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast an array to a timespan — vec_cast.timespan.numeric","text":"","code":"# S3 method for timespan.numeric vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.timespan.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast an array to a timespan — vec_cast.timespan.numeric","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/reference/vec_cast.timespan.partial_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.partial_time","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.partial_time","text":"Cast partial time timespan, representing uncertainty range","code":""},{"path":"/reference/vec_cast.timespan.partial_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.partial_time","text":"","code":"# S3 method for timespan.partial_time vec_cast(x, to, ...)"},{"path":"/reference/vec_cast.timespan.partial_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast partial time to timespan, representing uncertainty as a range — vec_cast.timespan.partial_time","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty.","code":""},{"path":"/news/index.html","id":"parttime-002-dev","dir":"Changelog","previous_headings":"","what":"parttime 0.0.2 (dev)","title":"parttime 0.0.2 (dev)","text":"Renamed parse_iso8601 parse_iso8601_datetime prepare introduction alternative parser iso8601 timespans. (#38, @dgkf) New format added CDISC-style datetime strings. Can used via .parttime(..., format = parse_cdisc_datetime). (#38, @dgkf) .parttime now, default, show warnings strings fail parse provided format. Behavior can configured using new .na parameter. (#36, @dgkf) extends lubridate-style accessor assignment helpers, year() year()<-. Unfortuntely, many provided S4 generics, may masked packages extend generics. generic-like functions provided non-generic forms lubridate always masked, tz(). (#14, @dgkf). added format parameter .parttime, allowing custom regular expressions functions used parse non-iso formats. established standards regularly needeed, included package. (#13, @dgkf) added res (“resolution”) parameter impute_* family functions, allowing field provided resolution imputed. , also added impute_date_* alternatives default imputing \"day\" resolution. (#12, @dgkf) rename is_partial_* has_partial_* avoid ambiguity class checks removed deprecated pillar interfaces bring package --speed vctrs package changes last years fixed subset assignment operators [<- [[<- improved imputation introduce dates aren’t viable given month","code":""},{"path":"/news/index.html","id":"parttime-001","dir":"Changelog","previous_headings":"","what":"parttime 0.0.1","title":"parttime 0.0.1","text":"initial release including loose parsing ISO 8601 datetime formats using parsedate tibble column formatting using pillar coersion POSIX, Date character","code":""}]
